Section 1:

1. Create k8s cluster from bare-metal :
a. 

Section 2 :

1. deployment file example :

apiVersion: apps/v1
kind: Deployment ---> name of object
metadata:
 name: client-deployment --> name of deployment object
spec:
 replicas: 1 --> number copy of pods
 selector:
  matchLabels:
   component: web --> select pod template based on label
 template:
  metadata:
   labels:
    component: web --> label of pods
  spec:
   containers:
    - name: client
      image: akrommusajid/multi-client
      ports:
       - containerPort: 3000

2. remove object :

kubectl delete -f <object file>
or
kubectl delete <object type> <object name>

3. view pod list:

kubectl get pods

4. view deployment list:

kubectl get deployments

5. view deployment detail:

kubectl describe deployment <deployment name>

6. view detile of pod list:

kubectl get pods -o wide

7. update image of deployment with new image from docker:

kubectl set image <object>/<object name> <container name>=<image name:tag>

8. enter terminal of pods:

kubectl exec -it <pod name> sh

9. view logs container of pods:

kubectl logs <pod name>

10. apply object config in one directory

kubectl apply -f <directory>

11. 3 type of access mode in persistant volume:
a. ReadWriteOnce -> Can be used by a single node
b. ReadOnlyMany -> multiple nodes can read
c. ReadWriteMany -> can be read and written to by many nodes

12. view kubernetes storage

kubectl get storageclass

13. view object list with different output

kubectl get <object type> -o <wide | json | yaml>

14. view persistant volume

kubectl get pv

15. view persistant volume claim

kubectl get pvc

16. Type of service:
a. ClusterIP -> Expose a set of pods to other object in cluster
b. NodePort -> Expose a set of pods to the outside world (only good for dev purposes!)
c. LoadBalancer -> (legacy way of getting network traffic into a cluster)
d. Ingress -> Expose a set of service to outside world

17. create encoded secret

kubectl create secret generic <name> --from-literal <key=value>

18. environment value only provide string

19. manual deployment scale

kubectl scale deployment <deployment name> --replicas=<number>

20. how to deploy ingress

a. create ingress controller : kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/service-nodeport.yaml
b. create ingress service

21. change/set image of container in deployment:

kubectl set image deployments/<deployment name> <continer name>=<docker image>



